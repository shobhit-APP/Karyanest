name: Build and Deploy JAR App to DigitalOcean Droplet

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
  DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
  FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
  FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
  FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
  FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  PERMISSION_SECRET_KEY: ${{ secrets.PERMISSION_SECRET_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Maven
        run: mvn clean install --file karyanestApplication/pom.xml

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: karyanestApplication/target/*.jar
          if-no-files-found: warn

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'

    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app

      - name: List files for verification
        run: ls -la

      - name: Copy JAR to DigitalOcean Droplet
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          source: "*.jar"
          target: "/root/app/"

      - name: Restart Spring Boot JAR
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            set -e
            cd /root/app
            echo "Stopping existing JAR (if any)..."
            PID=$(pgrep -f '\.jar' || true)
            if [ -n "$PID" ]; then
              echo "Killing PID $PID"
              kill -TERM $PID || true
              sleep 5
              if ps -p $PID > /dev/null; then
                kill -KILL $PID || true
              fi
            fi

            JAR_FILE=$(ls *.jar | head -n 1)
            if [ -z "$JAR_FILE" ]; then
              echo "No JAR found!"
              exit 1
            fi

            echo "Launching $JAR_FILE..."
            nohup java -jar "$JAR_FILE" > app.log 2>&1 &
            NEW_PID=$!
            sleep 10
            if ps -p $NEW_PID > /dev/null; then
              echo "✅ App started successfully (PID: $NEW_PID)"
            else
              echo "❌ App failed. Logs:"
              tail -n 50 app.log
              exit 1
            fi

            echo "📜 Last 20 lines of logs:"
            tail -n 20 app.log
