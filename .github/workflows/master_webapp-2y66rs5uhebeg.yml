name: Build and deploy JAR app to DigitalOcean Droplets

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
  DROPLET_PASSWORD: ${{ secrets.DROPLET_PASSWORD }}
  FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
  FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
  FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
  FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  PERMISSION_SECRET_KEY: ${{ secrets.PERMISSION_SECRET_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Java version
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean install

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: karyanestApplication/target/*.jar
          if-no-files-found: warn

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: java-app

      - name: List files
        run: ls -la

      - name: Deploy to DigitalOcean
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          source: "*.jar"
          target: "/root/app/"

      - name: Start application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            set -e  # Exit on any error
            cd /root/app
            echo "Stopping old JAR process (if running)..."
            PID=$(pgrep -f '\.jar' || true)  # Don't fail if no process is found
            if [ -n "$PID" ]; then
              echo "Found running JAR process with PID: $PID"
              kill -TERM $PID || true  # Send SIGTERM, ignore errors
              echo "Waiting for process to terminate..."
              for i in {1..30}; do
                if ! ps -p $PID > /dev/null; then
                  echo "✅ Old JAR process stopped"
                  break
                fi
                sleep 1
              done
              if ps -p $PID > /dev/null; then
                echo "⚠️ Process $PID still running, sending SIGKILL..."
                kill -KILL $PID || true
              fi
            else
              echo "No running JAR process found."
            fi

            # Find the JAR file (expecting exactly one)
            JAR_FILE=$(ls *.jar | head -n 1)
            if [ -z "$JAR_FILE" ]; then
              echo "❌ No JAR file found in /root/app/"
              exit 1
            fi
            if [ $(ls *.jar | wc -l) -gt 1 ]; then
              echo "⚠️ Multiple JAR files found, using $JAR_FILE"
            fi

            echo "Starting new JAR: $JAR_FILE..."
            nohup java -jar "$JAR_FILE" > app.log 2>&1 &
            NEW_PID=$!
            sleep 10

            # Check if the new process is still running
            if ps -p $NEW_PID > /dev/null; then
              echo "✅ Application started successfully with PID: $NEW_PID"
            else
              echo "❌ Application failed to start. Checking logs..."
              tail -n 50 app.log
              exit 1
            fi

            echo "Showing last 20 log lines:"
            tail -n 20 app.log